
import React, { useState } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { Send, Mail, MessageSquare, Star, Heart, Phone, MapPin, Clock } from 'lucide-react';

const Contact = () => {
  const { language } = useLanguage();
  const [activeForm, setActiveForm] = useState('meme');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: '',
    rating: 5,
    category: 'meme'
  });

  const forms = [
    { id: 'meme', label: { en: 'Submit Meme/Joke', bn: '‡¶Æ‡¶ø‡¶Æ/‡¶ú‡ßã‡¶ï ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶æ‡¶ì' }, icon: 'üòÇ' },
    { id: 'game', label: { en: 'Suggest Game', bn: '‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂' }, icon: 'üéÆ' },
    { id: 'feedback', label: { en: 'Feedback', bn: '‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§' }, icon: 'üí¨' },
    { id: 'contact', label: { en: 'General Contact', bn: '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó' }, icon: 'üìû' }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Form submitted:', { ...formData, category: activeForm });
    // Here you would send the data to your backend
    
    // Reset form
    setFormData({
      name: '',
      email: '',
      subject: '',
      message: '',
      rating: 5,
      category: activeForm
    });
    
    alert(language === 'bn' ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶!' : 'Your message has been sent! Thank you!');
  };

  const contactInfo = [
    {
      icon: Mail,
      title: { en: 'Email Us', bn: '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ï‡¶∞‡ßã' },
      content: 'hello@mojardunia.com',
      description: { en: 'Send us your thoughts', bn: '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶™‡¶æ‡¶†‡¶æ‡¶ì' }
    },
    {
      icon: Phone,
      title: { en: 'Call Us', bn: '‡¶´‡ßã‡¶® ‡¶ï‡¶∞‡ßã' },
      content: '+880-123-456-7890',
      description: { en: 'Mon-Fri 9AM-6PM', bn: '‡¶∏‡ßã‡¶Æ-‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞ ‡ßØ‡¶ü‡¶æ-‡ß¨‡¶ü‡¶æ' }
    },
    {
      icon: MapPin,
      title: { en: 'Visit Us', bn: '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶è‡¶∏‡ßã' },
      content: 'Dhaka, Bangladesh',
      description: { en: 'Come say hello!', bn: '‡¶è‡¶∏‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã ‡¶¨‡¶≤‡ßã!' }
    },
    {
      icon: Clock,
      title: { en: 'Response Time', bn: '‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º' },
      content: '24-48 hours',
      description: { en: 'We reply quickly', bn: '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶á' }
    }
  ];

  const teamMembers = [
    {
      name: '‡¶∞‡¶æ‡¶π‡ßÅ‡¶≤ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶',
      role: { en: 'Fun Content Creator', bn: '‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶ü‡¶∞' },
      avatar: 'üë®‚Äçüíª',
      specialty: { en: 'Jokes & Memes', bn: '‡¶ú‡ßã‡¶ï‡¶∏ ‡¶ì ‡¶Æ‡¶ø‡¶Æ' }
    },
    {
      name: '‡¶∏‡¶æ‡¶∞‡¶æ ‡¶ñ‡¶æ‡¶®',
      role: { en: 'Game Designer', bn: '‡¶ó‡ßá‡¶Æ ‡¶°‡¶ø‡¶ú‡¶æ‡¶á‡¶®‡¶æ‡¶∞' },
      avatar: 'üë©‚Äçüé®',
      specialty: { en: 'Mini Games', bn: '‡¶Æ‡¶ø‡¶®‡¶ø ‡¶ó‡ßá‡¶Æ‡¶∏' }
    },
    {
      name: '‡¶Ü‡¶∞‡ßç‡¶®‡¶¨ ‡¶∞‡¶æ‡¶Ø‡¶º',
      role: { en: 'AI Developer', bn: '‡¶è‡¶Ü‡¶á ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞' },
      avatar: 'ü§ñ',
      specialty: { en: 'AI Tools', bn: '‡¶è‡¶Ü‡¶á ‡¶ü‡ßÅ‡¶≤‡¶∏' }
    }
  ];

  const renderForm = () => {
    const getFormContent = () => {
      switch (activeForm) {
        case 'meme':
          return {
            title: { en: 'Submit Your Meme or Joke', bn: '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ø‡¶Æ ‡¶¨‡¶æ ‡¶ú‡ßã‡¶ï ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶æ‡¶ì' },
            description: { en: 'Share your funny content with our community!', bn: '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶Æ‡¶ø‡¶â‡¶®‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã!' },
            fields: ['name', 'email', 'subject', 'message']
          };
        case 'game':
          return {
            title: { en: 'Suggest a New Game', bn: '‡¶®‡¶§‡ßÅ‡¶® ‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶æ‡¶ì' },
            description: { en: 'Have an idea for a fun game? Let us know!', bn: '‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ó‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶õ‡ßá? ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ‡¶ì!' },
            fields: ['name', 'email', 'subject', 'message']
          };
        case 'feedback':
          return {
            title: { en: 'Share Your Feedback', bn: '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§ ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã' },
            description: { en: 'Help us improve Mojar Dunia!', bn: '‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¶‡ßÅ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßã!' },
            fields: ['name', 'email', 'subject', 'message', 'rating']
          };
        case 'contact':
          return {
            title: { en: 'Get in Touch', bn: '‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã' },
            description: { en: 'We\'d love to hear from you!', bn: '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á!' },
            fields: ['name', 'email', 'subject', 'message']
          };
        default:
          return { title: { en: '', bn: '' }, description: { en: '', bn: '' }, fields: [] };
      }
    };

    const formContent = getFormContent();

    return (
      <div className="bg-white rounded-2xl shadow-xl p-8">
        <div className="text-center mb-8">
          <div className="text-5xl mb-4">{forms.find(f => f.id === activeForm)?.icon}</div>
          <h3 className="text-2xl font-bold text-gray-800 mb-2">
            {formContent.title[language]}
          </h3>
          <p className="text-gray-600">
            {formContent.description[language]}
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {formContent.fields.includes('name') && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {language === 'bn' ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ' : 'Your Name'}
              </label>
              <input
                type="text"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                required
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder={language === 'bn' ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡ßá‡¶ñ‡ßã...' : 'Enter your name...'}
              />
            </div>
          )}

          {formContent.fields.includes('email') && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {language === 'bn' ? '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ' : 'Email Address'}
              </label>
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                required
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder={language === 'bn' ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶≤‡ßá‡¶ñ‡ßã...' : 'Enter your email...'}
              />
            </div>
          )}

          {formContent.fields.includes('subject') && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {language === 'bn' ? '‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º' : 'Subject'}
              </label>
              <input
                type="text"
                name="subject"
                value={formData.subject}
                onChange={handleInputChange}
                required
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder={language === 'bn' ? '‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º ‡¶≤‡ßá‡¶ñ‡ßã...' : 'Enter subject...'}
              />
            </div>
          )}

          {formContent.fields.includes('rating') && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {language === 'bn' ? '‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç ‡¶¶‡¶æ‡¶ì' : 'Rate Your Experience'}
              </label>
              <div className="flex items-center space-x-2">
                {[1, 2, 3, 4, 5].map((star) => (
                  <button
                    key={star}
                    type="button"
                    onClick={() => setFormData(prev => ({ ...prev, rating: star }))}
                    className={`text-2xl transition-colors duration-200 ${
                      star <= formData.rating ? 'text-yellow-400' : 'text-gray-300'
                    }`}
                  >
                    <Star fill="currentColor" />
                  </button>
                ))}
                <span className="ml-2 text-gray-600">
                  {formData.rating}/5 {language === 'bn' ? '‡¶§‡¶æ‡¶∞‡¶æ' : 'stars'}
                </span>
              </div>
            </div>
          )}

          {formContent.fields.includes('message') && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {language === 'bn' ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ' : 'Your Message'}
              </label>
              <textarea
                name="message"
                value={formData.message}
                onChange={handleInputChange}
                required
                rows={5}
                className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none"
                placeholder={language === 'bn' ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶≤‡ßá‡¶ñ‡ßã...' : 'Write your message in detail...'}
              />
            </div>
          )}

          <button
            type="submit"
            className="w-full bg-gradient-to-r from-purple-500 to-blue-500 text-white py-3 rounded-lg font-semibold hover:from-purple-600 hover:to-blue-600 transition-all duration-200 transform hover:scale-105 flex items-center justify-center space-x-2"
          >
            <Send size={18} />
            <span>{language === 'bn' ? '‡¶™‡¶æ‡¶†‡¶æ‡¶ì' : 'Send Message'}</span>
          </button>
        </form>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-pink-50 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
            üì¨ Contact & Submit
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {language === 'bn' 
              ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§, ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¨‡¶æ ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶ì - ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡ßÅ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á!' 
              : 'Send us your feedback, suggestions or fun content - we want to hear from you!'
            }
          </p>
        </div>

        {/* Contact Info Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {contactInfo.map((info, index) => {
            const IconComponent = info.icon;
            return (
              <div
                key={index}
                className="bg-white rounded-xl shadow-lg p-6 text-center hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2"
              >
                <div className="inline-flex items-center justify-center w-12 h-12 bg-gradient-to-r from-purple-400 to-blue-500 text-white rounded-full mb-4">
                  <IconComponent size={24} />
                </div>
                <h3 className="text-lg font-bold text-gray-800 mb-2">
                  {info.title[language]}
                </h3>
                <p className="text-gray-600 font-medium mb-1">{info.content}</p>
                <p className="text-gray-500 text-sm">{info.description[language]}</p>
              </div>
            );
          })}
        </div>

        {/* Form Section */}
        <div className="max-w-4xl mx-auto mb-12">
          {/* Form Type Selector */}
          <div className="flex flex-wrap justify-center gap-4 mb-8">
            {forms.map((form) => (
              <button
                key={form.id}
                onClick={() => setActiveForm(form.id)}
                className={`flex items-center space-x-2 px-6 py-3 rounded-full font-semibold transition-all duration-200 transform hover:scale-105 ${
                  activeForm === form.id
                    ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white shadow-lg'
                    : 'bg-white text-gray-700 hover:bg-gray-50 shadow-md'
                }`}
              >
                <span className="text-xl">{form.icon}</span>
                <span>{form.label[language]}</span>
              </button>
            ))}
          </div>

          {/* Form */}
          {renderForm()}
        </div>

        {/* Team Section */}
        <div className="max-w-6xl mx-auto mb-12">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-800 mb-4">
              üë• {language === 'bn' ? '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ü‡¶ø‡¶Æ' : 'Meet Our Team'}
            </h2>
            <p className="text-gray-600">
              {language === 'bn' 
                ? '‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶¶‡ßÅ‡¶®‡¶ø‡¶Ø‡¶º‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º ‡¶π‡¶ì!'
                : 'Meet the people who create the fun world for you!'
              }
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {teamMembers.map((member, index) => (
              <div
                key={index}
                className="bg-white rounded-2xl shadow-lg p-6 text-center hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2"
              >
                <div className="text-6xl mb-4">{member.avatar}</div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">{member.name}</h3>
                <p className="text-purple-600 font-medium mb-2">{member.role[language]}</p>
                <p className="text-gray-600 text-sm">{member.specialty[language]}</p>
                <div className="mt-4 flex justify-center space-x-2">
                  <button className="text-blue-500 hover:text-blue-600 transition-colors duration-200">
                    <Mail size={18} />
                  </button>
                  <button className="text-pink-500 hover:text-pink-600 transition-colors duration-200">
                    <MessageSquare size={18} />
                  </button>
                  <button className="text-red-500 hover:text-red-600 transition-colors duration-200">
                    <Heart size={18} />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* FAQ Section */}
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-800 mb-4">
                ‚ùì {language === 'bn' ? '‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®' : 'Frequently Asked Questions'}
              </h2>
              <p className="text-gray-600">
                {language === 'bn' 
                  ? '‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶Ø‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶õ‡ßá ‡¶§‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã!'
                  : 'Find answers to common questions you might have!'
                }
              </p>
            </div>

            <div className="space-y-6">
              {[
                {
                  q: { en: 'How can I submit my meme or joke?', bn: '‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ø‡¶Æ ‡¶¨‡¶æ ‡¶ú‡ßã‡¶ï ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?' },
                  a: { en: 'Use the "Submit Meme/Joke" form above and share your funny content with us!', bn: '‡¶â‡¶™‡¶∞‡ßá‡¶∞ "‡¶Æ‡¶ø‡¶Æ/‡¶ú‡ßã‡¶ï ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶æ‡¶ì" ‡¶´‡¶∞‡ßç‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã!' }
                },
                {
                  q: { en: 'Are all games free to play?', bn: '‡¶∏‡¶¨ ‡¶ó‡ßá‡¶Æ ‡¶ï‡¶ø ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º?' },
                  a: { en: 'Yes! All our mini games are completely free and always will be.', bn: '‡¶π‡ßç‡¶Ø‡¶æ‡¶Å! ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶ó‡ßá‡¶Æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶®‡¶æ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§' }
                },
                {
                  q: { en: 'How often do you add new content?', bn: '‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶§ ‡¶ò‡¶® ‡¶ò‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã?' },
                  a: { en: 'We add new jokes, games, and features every week based on your suggestions!', bn: '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶ú‡ßã‡¶ï‡¶∏, ‡¶ó‡ßá‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶ø!' }
                }
              ].map((faq, index) => (
                <div key={index} className="border-l-4 border-purple-500 pl-6">
                  <h4 className="font-bold text-gray-800 mb-2">{faq.q[language]}</h4>
                  <p className="text-gray-600">{faq.a[language]}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Contact;
